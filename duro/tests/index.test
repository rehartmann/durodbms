#!/bin/sh
# Execute tclsh from the user's PATH \
exec tclsh "$0" ${1+"$@"}

#
# Test non-unique (user) indexes
#

package require tcltest 2.2
eval ::tcltest::configure $argv
namespace import ::tcltest::*

source [file dirname [info script]]/setup.tcl

test index {indexes} -setup $SETUP -body {
    set dbenv [duro::env open $dbenvname]

    # Create Database
    duro::db create $dbenv TEST
    
    set tx [duro::begin $dbenv TEST]

    duro::table create T1 {
       {A integer}
       {B string}
       {C string}
       {D string 'x'}
    } {{A}} $tx

    duro::table create T2 {
       {B string}
       {C string}
       {E string}
    } {{B C E}} $tx

    duro::index create IX1 T1 {B -} $tx
    
    if {![catch {duro::index create IX1 T1 {C -} $tx}]} {
        error "Index creation should fail, but succeeded"
    }

    duro::commit $tx

    set tx [duro::begin $dbenv TEST]
    
    duro::insert T1 {A 1 B Bli C X} $tx
    duro::insert T1 {A 2 B Bla C Y} $tx
    duro::insert T1 {A 3 B Bla C X} $tx
    duro::insert T1 {A 4 B Blubb C Y} $tx
    
    duro::insert T2 {B Bli C X E a} $tx
    duro::insert T2 {B Bla C Y E b} $tx
    duro::insert T2 {B Blubb C X E c} $tx
    
    duro::table expr t {T1 WHERE B="Bla"} $tx

    # Check if IX1 is used
    set plan [duro::table getplan t $tx]
    if {![string match "*INDEX IX1*" $plan]} {
        error "IX1 should be used, but is not"
    }
    
    set ta [duro::array create t {A asc} $tx]
    
    set len [duro::array length $ta]
    if {$len != 2} {
        error "Array length is $len, should be 2"
    }
    
    set tpl [duro::array index $ta 0 $tx]
    set stpl {A 2 B Bla C Y D x}
    if {![tequal $tpl $stpl]} {
        error "Tuple should be $stpl, but is $tpl"
    }
    
    set tpl [duro::array index $ta 1 $tx]
    set stpl {A 3 B Bla C X D x}
    if {![tequal $tpl $stpl]} {
        error "Tuple should be $stpl, but is $tpl"
    }
    
    duro::array drop $ta
    duro::table drop t $tx
    
    duro::table expr t {T2 JOIN T1} $tx

    # Check if IX1 is used
    set plan [duro::table getplan t $tx]
    if {![string match "*INDEX IX1*" $plan]} {
       error "IX1 should be used, but is not"
    }

    set ta [duro::array create t {A asc} $tx]
    checkarray $ta {{A 1 B Bli C X D x E a} {A 2 B Bla C Y D x E b}} $tx
    duro::array drop $ta
    duro::table drop t $tx

    duro::table expr t {T1 JOIN T2} $tx
    set plan [duro::table getplan t $tx]
    if {![string match "*INDEX IX1*" $plan]} {
       error "IX1 should be used, but is not"
    }

    set ta [duro::array create t {A asc} $tx]
    checkarray $ta {{A 1 B Bli C X D x E a} {A 2 B Bla C Y D x E b}} $tx
    duro::array drop $ta
    duro::table drop t $tx

    duro::commit $tx

    duro::env close $dbenv
    
    set dbenv [duro::env open $dbenvname]
    
    set tx [duro::begin $dbenv TEST]
    
    set tpl [duro::expr {TUPLE FROM (T1 WHERE B="Bli")} $tx]
    set stpl {B Bli A 1 C X D x}
    if {![tequal $tpl $stpl]} {
        error "Tuple should be $stpl, but is $tpl"
    }

    set tpl [duro::expr {TUPLE FROM (T1 WHERE A=4 AND B="Blubb")} $tx]
    set stpl {A 4 B Blubb C Y D x}
    if {![tequal $tpl $stpl]} {
        error "Tuple should be $stpl, but is $tpl"
    }
    
    if {![duro::expr {is_empty (T1 WHERE B="Blubb" AND C="X")} $tx]} {
        error "Expression should be empty, but is not"
    }
    
    duro::update T1 {B = "Bla"} A {5 - A} $tx
    set a [duro::array create T1 {A asc} $tx]
    checkarray $a {{A 1 B Bli C X D x} {A 2 B Bla C X D x}
            {A 3 B Bla C Y D x} {A 4 B Blubb C Y D x}} $tx
    duro::array drop $a
    
    # Must have no effect
    duro::update T1 {B = "Bla" AND C = "Z"} D {"y"} $tx
    set a [duro::array create T1 {A asc} $tx]
    checkarray $a {{A 1 B Bli C X D x} {A 2 B Bla C X D x}
            {A 3 B Bla C Y D x} {A 4 B Blubb C Y D x}} $tx
    duro::array drop $a
    
    duro::update T1 {B = "Bla"} D {"y"} $tx
    set a [duro::array create T1 {A asc} $tx]
    checkarray $a {{A 1 B Bli C X D x} {A 2 B Bla C X D y}
            {A 3 B Bla C Y D y} {A 4 B Blubb C Y D x}} $tx
    duro::array drop $a
    
    duro::update T1 {B = "Bla" AND C = "X"} D {"z"} $tx
    set a [duro::array create T1 {A asc} $tx]
    checkarray $a {{A 1 B Bli C X D x} {A 2 B Bla C X D z}
            {A 3 B Bla C Y D y} {A 4 B Blubb C Y D x}} $tx
    duro::array drop $a
    
    # Must have no effect
    duro::delete T1 {B = "Bla" AND C = "Z"} $tx
    set a [duro::array create T1 {A asc} $tx]
    checkarray $a {{A 1 B Bli C X D x} {A 2 B Bla C X D z}
            {A 3 B Bla C Y D y} {A 4 B Blubb C Y D x}} $tx
    duro::array drop $a
    
    duro::delete T1 {B = "Bla" AND C = "Y"} $tx
    set a [duro::array create T1 {A asc} $tx]
    checkarray $a {{A 1 B Bli C X D x} {A 2 B Bla C X D z}
            {A 4 B Blubb C Y D x}} $tx
    duro::array drop $a
    
    duro::delete T1 {B = "Bla"} $tx
    set a [duro::array create T1 {A asc} $tx]
    checkarray $a {{A 1 B Bli C X D x} {A 4 B Blubb C Y D x}} $tx
    duro::array drop $a
    
    duro::commit $tx
    
    set tx [duro::begin $dbenv TEST]
    
    duro::index drop IX1 $tx
    
    duro::rollback $tx
    
    duro::env close $dbenv
    
    set dbenv [duro::env open $dbenvname]
    
    set tx [duro::begin $dbenv TEST]
    
    duro::index drop IX1 $tx
    
    if {![catch {duro::index drop IX1 $tx}]} {
        error "Dropping index should fail, but succeeded"
    }
    
    # Check if the table can still be accessed
    set stpl {A 1 B Bli C X D x}
    set tpl [duro::expr {TUPLE FROM (T1 WHERE A=1)} $tx]
    if {![tequal $tpl $stpl]} {
        error "TUPLE FROM T1 is $tpl, but should be $stpl"
    }
    
    duro::commit $tx
    
    duro::env close $dbenv
}

cleanupTests
