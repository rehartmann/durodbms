#!/bin/sh
# Execute tclsh from the user's PATH \
exec tclsh "$0" ${1+"$@"}

#
# Test create, insert, update with several kinds of real tables
#

package require tcltest 2.2
eval ::tcltest::configure $argv
namespace import ::tcltest::*

source [file dirname [info script]]/setup.tcl

test rtables {real tables} -setup $SETUP -body {
    set dbenv [duro::env open $dbenvname]

    # Create Database
    duro::db create $dbenv TEST

    #
    # Perform test with table with integer key
    #
    
    set tx [duro::begin $dbenv TEST]

    # Create table
    duro::table create T {
       {STRATTR string}
       {INTATTR integer}
    } {{INTATTR}} $tx
    
    # Rename table
    duro::table rename T T1 $tx
    
    # Insert tuple
    duro::insert T1 {INTATTR 1 STRATTR Bla} $tx
    
    # Insert tuple a second time
    if {![catch {
        duro::insert T1 {INTATTR 1 STRATTR Bla} $tx
    }]} {
        error "Insert should fail, but succeeded"
    }
    
    # Update nonkey attribute
    set cnt [duro::update T1 STRATTR {STRATTR || "x"} $tx]
    
    if {$cnt != 1} {
        error "update returned $cnt instead of 1"
    }
    
    # Update key attribute
    duro::update T1 INTATTR {INTATTR + 1} $tx

    if {[duro::expr {T1 <> RELATION { TUPLE { INTATTR 2, STRATTR "Blax" } }} $tx]} {
        error "Wrong value of T1: [duro::expr T]"
    }

    # Insert 2nd tuple
    duro::insert T1 {INTATTR 3 STRATTR Bla} $tx
    
    duro::commit $tx
    
    set tx [duro::begin $dbenv TEST]
    
    # Must fail
    if {![catch {
        duro::update T1 {INTATTR = 3} INTATTR 2 STRATTR {"Bla"} $tx
    }]} {
        error "update should fail, but succeeded"
    }
    
	# Under FoundationDB, an unsuccessful update will cause a rollback
    catch { duro::rollback $tx }
    
    set tx [duro::begin $dbenv TEST]
    
    # Must fail
    if {![catch {
        duro::update T1 {STRATTR = "Bla"} INTATTR 2 STRATTR {"Bla"} $tx
    }]} {
        error "update should fail, but succeeded"
    }
    
    catch { duro::rollback $tx }
    
    set tx [duro::begin $dbenv TEST]
    
    # Must fail
    if {![catch {
        duro::update T1 {INTATTR = 3} INTATTR 2 STRATTR {"Blax"} $tx
    }]} {
        error "update should fail, but succeeded"
    }
    
    catch { duro::rollback $tx }

    set tx [duro::begin $dbenv TEST]

    # Remove tuple by non-key attribute
    set cnt [duro::delete T1 {STRATTR = "Bla"} $tx]
    
    if {$cnt != 1} {
        error "$cnt deleted tuples reported, should be 1"
    }

    if {[duro::expr {(TUPLE FROM T1) <> TUPLE { INTATTR 2, STRATTR "Blax" }} $tx]} {
        error "wrong value of TUPLE FROM T1"
    }

    # Remove tuple
    duro::delete T1 $tx

    # Check if table is empty
    if {![duro::expr {is_empty (T1)} $tx]} {
        error "Table should be empty, but is not"
    }

    # Drop table
    duro::table drop T1 $tx
    
    #
    # Perform test with table with two keys, one 'atomic' and one compound
    #
    
    # Create table
    duro::table create T2 {
       {STRATTR1 string}
       {INTATTR integer}
       {STRATTR2 string}
       {STRATTR3 string}
    } {{STRATTR1} {INTATTR STRATTR2}} $tx
    
    # !! duro::table rename T T2 $tx
    
    duro::commit $tx
    
    # Close DB environment
    duro::env close $dbenv
    
    # Reopen DB environment
    set dbenv [duro::env open $dbenvname]
    
    set tx [duro::begin $dbenv TEST]
    
    #
    # Check keys
    #
    set keys [duro::table keys T2 $tx]
    
    set keycount [llength $keys]
    if {$keycount != 2} {
        error "# of keys is $keycount, should be 2"
    }
    
    set keys [lsort $keys]
    if {[lsort [lindex $keys 0]] != {INTATTR STRATTR2}
            || [lindex $keys 1] == {STRATTR}} {
        error "Invalid keys: $keys"
    }

    # Insert tuple
    duro::insert T2 {INTATTR 1 STRATTR1 Bla STRATTR2 Bli STRATTR3 Blubb} $tx
    
    # Update nonkey attribute
    duro::update T2 STRATTR3 {STRATTR3 || "x"} $tx
    
    # Update key attribute
    duro::update T2 INTATTR {INTATTR * 2} $tx
    
    set t [duro::expr {TUPLE FROM T2} $tx]
    set st {INTATTR 2 STRATTR1 Bla STRATTR2 Bli STRATTR3 Blubbx}
    
    if {![tequal $t $st] } {
        error "Tuple value is $t, should be $st"
    }

    #
    # Check duro::expr on virtual tables
    #
    
    set tl [duro::expr {T2 WHERE TRUE} $tx]
    
    if {[llength $tl] != 1} {
       error "Wrong result from T2 WHERE TRUE: $tl"
    }
    
    if {![tequal [lindex $tl 0] $st]} {
       error "Wrong result from T2 WHERE TRUE: $tl"
    }
    
    set tl [duro::expr {T2 WHERE FALSE} $tx]
    if {$tl != {}} {
       error "Wrong result from T2 WHERE FALSE: $tl"
    }
    
    #
    # Check duro::expr on real table
    #
    
    set tl [duro::expr {T2} $tx]
    
    if {[llength $tl] != 1} {
       error "Wrong result from T2: $tl"
    }
    
    if {![tequal [lindex $tl 0] $st]} {
       error "Wrong result from T2: $tl"
    }
    
    # Should have no effect
    duro::update T2 {STRATTR1 = "Bla" AND INTATTR = 3} STRATTR3 {"Yo"} $tx
    
    set v [duro::expr {(TUPLE FROM T2).STRATTR3} $tx]
    if {$v != "Blubbx"} {
        error "Value should be Blubbx, but is $v"
    }
    
    # Should update tuple
    duro::update T2 {STRATTR1 = "Bla" AND INTATTR = 2} STRATTR3 {"Blubby"} $tx
    
    set v [duro::expr {(TUPLE FROM T2).STRATTR3} $tx]
    if {$v != "Blubby"} {
        error "Value should be Blubby, but is $v"
    }
    
    #
    # Update by secondary key
    #

    # Must have no effect
    duro::update T2 {INTATTR = 2 AND STRATTR2 = "Bla"} STRATTR3 {"Yo"} $tx
    set stpl {INTATTR 2 STRATTR1 Bla STRATTR2 Bli STRATTR3 Blubby}
    set tpl [duro::expr {TUPLE FROM T2} $tx]
    if {![tequal $tpl $stpl]} {
        error "Tuple should be $stpl, but is $tpl"
    }

    #
    # Delete by secondary key
    #
    
    # Tuple must not be deleted
    set cnt [duro::delete T2 {INTATTR = 2 AND STRATTR2 = "Blubby"} $tx]
    
    if {$cnt != 0} {
        error "$cnt deleted tuples reported, should be 0"
    }
    
    set cnt [duro::expr {COUNT (T2)} $tx]
    if {$cnt != 1} {
        error "T2 should contain 1 tuple, but contains $cnt"
    }
    
    # Tuple must not be deleted
    duro::delete T2 {INTATTR = 2 AND STRATTR2 = "Bli" AND STRATTR3 = "B"} $tx
    
    if {[duro::expr {is_empty (T2)} $tx]} {
        error "T2 should not be empty, but is"
    }
    
    # Tuple must be deleted
    duro::delete T2 {INTATTR = 2 AND STRATTR2 = "Bli" AND STRATTR3 = "Blubby"} $tx
    
    if {![duro::expr {is_empty (T2)} $tx]} {
        error "T2 should be empty, but is not"
    }

    # Drop table
    duro::table drop T2 $tx
    
    duro::table create -local t {
       {A string}
       {B string}
    } {{A}} $tx
    
    if {![catch {
        duro::table create -local t {
           {A string}
           {B string}
        } {{A}} $tx
    }]} {
        error "Table creation should fail, but succeeded"
    }
    
    duro::commit $tx
    
    set tx [duro::begin $dbenv TEST]
    
    # Create table
    duro::table create T {
       {A integer}
       {B float}
       {C float 1.0}
    } {{A}} $tx
    
    duro::table rename T T3 $tx

    # Test recreating table T2
    duro::table create T2 {
       {STRATTR1 string}
       {INTATTR integer}
       {STRATTR2 string}
       {STRATTR3 string}
    } {{STRATTR1} {INTATTR STRATTR2}} $tx
    
    # Insert tuples
    duro::insert T3 {A 1 B 1.0} $tx
    duro::insert T3 {A 2 B 2.0} $tx
    duro::insert T3 {A 3 B 3.0} $tx
    duro::insert T3 {A 4 B 4.0} $tx
    duro::insert T3 {A 5 B 5.0 C 2.0} $tx

    duro::commit $tx

    set tx [duro::begin $dbenv TEST]
    
    # Update must fail
    if {![catch {
        duro::update T3 B {1.0 / (B - 3.0)} $tx
    }]} {
        error "Update should fail, but succeeded"
    }

    # PostgreSQL wants a new tx after failure
    catch { duro::rollback $tx }
    set tx [duro::begin $dbenv TEST]

    set a [duro::array create T3 {A asc} $tx]
    checkarray $a {{A 1 B 1.0 C 1.0} {A 2 B 2.0 C 1.0} {A 3 B 3.0 C 1.0}
            {A 4 B 4.0 C 1.0} {A 5 B 5.0 C 2.0}} $tx
    duro::array drop $a
    
    #
    # Check table with compound string key
    #
    
    duro::table create T4 {
       {A string}
       {B string}
       {C string}
    } {{B C}} $tx
    
    duro::insert T4 {A a B be C c} $tx

    #
    # Shrink 1st key attribute
    #
    duro::update T4 {B="be" AND C="c"} A {"a"} B {"b"} C {"c"} $tx
    
    set tpl [duro::expr {TUPLE FROM T4} $tx]
    if {![tequal $tpl {A a B b C c}]} {
        error "wrong value of TUPLE FROM T4"
    }
    
    duro::table drop T4 $tx
    
    duro::commit $tx
    
    duro::env close $dbenv
}

test droptables {create and drop tables} -setup $SETUP -body {
    set dbenv [duro::env open $dbenvname]

    # Create Database
    duro::db create $dbenv TEST

    set tx [duro::begin $dbenv TEST]

    duro::table create T1 {
       {NO integer}
    } {{NO}} $tx
    
    duro::commit $tx

    set tx [duro::begin $dbenv TEST]

    duro::insert T1 {NO 1} $tx

    duro::table drop T1 $tx

    duro::table create T2 {
        {NO integer}
    } {{NO}} $tx
    
    duro::insert T2 {NO 1} $tx

    duro::commit $tx
    
    # Close DB environment
    duro::env close $dbenv
}

cleanupTests
