#!/bin/sh
# Execute tclsh from the user's PATH \
exec tclsh "$0" ${1+"$@"}

#
# Test tuple definitions and operations
#

package require tcltest 2.2
eval ::tcltest::configure $argv
namespace import ::tcltest::*

set testdir [::tcltest::configure -testdir]

test tuplevar {tuple variables} -body {
    exec $testdir/../../dli/durodt << {
        var t1 init tuple {i 5, s 'foo'};
        io.put_line(CAST_AS_STRING(t1.i) || ' ' || t1.s);
        io.put(t1.i); io.put_line('');
        io.put(s FROM t1); io.put_line('');

		var t2 init tuple{};
		var t3 tuple{i int} init tuple{i 555};
		io.put(t3.i); io.put_line('');

        var t4 same_type_as(t1);
        t4 := tup {i 2, s 'bar'};
        io.put_line(CAST_AS_STRING(t4.i) || ' ' || t4.s);
        io.put(t4 {s}); io.put_line('');

        -- Test type checks
        var t5 tup{id int, s string};
        t5 := tup{id 1, s 'Ylalali'};
        try
            t5 := tup{id 1};
        catch err type_mismatch_error;
            io.put_line('missing attribute caught');
        end try;

        try
            t5 := tup{id 1, s 'Foo', t 'Bar'};
        catch err type_mismatch_error;
            io.put_line('surplus attribute caught');
        end try;

        try
            t5 := tup{id 1, s 2};
        catch err type_mismatch_error;
            io.put_line('differing attribute type caught');
        end try;

        try
            t5 := tup{id 1, s 'Foo', s 'Bar'};
        catch err invalid_argument_error;
            io.put_line('double attribute caught');
        end try;
    }
} -result {5 foo
5
foo
555
2 bar
TUPLE {s 'bar'}
missing attribute caught
surplus attribute caught
differing attribute type caught
double attribute caught
}

test tupleupdexpr {tuple update expression} -body {
    exec $testdir/../../dli/durodt << {
        var t1 init tuple {i 5, s 'bar'};
        io.put((update t1 : {i := i + 2, s := s || 'r'}).i); io.put_line('');
        io.put(s from (update t1 : {i := i + 2, s := s || 'r'})); io.put_line('');        
    }
} -result {7
barr
}

test tupleupdstmt {tuple update} -body {
    exec $testdir/../../dli/durodt << {
        var t1 init tuple {i 5, s 'bar'};
        update t1 {i := i + 2, s := s || 'r'};
        io.put(t1.i); io.put_line('');
        io.put(s from t1); io.put_line('');
        t1.i := 15;
        io.put(t1.i); io.put_line('');                
    }
} -result {7
barr
15
}

test union {tuple UNION} -body {
    exec $testdir/../../dli/durodt << {
        var t1 init tuple {i 5, j 6} union tup {j 6, x 2};
        io.put(t1.i); io.put_line('');
        io.put(t1.j); io.put_line('');
        io.put(t1.x); io.put_line('');

        io.put((tuple{} union tuple {s 'yo'}).s); io.put_line('');
    }
} -result {5
6
2
yo
}

test tupleval {tuple value} -body {
    exec $testdir/../../dli/durodt << {
        io.put_line(tuple {a 'du', b 'ro'}.b);
    }
} -result {ro
}

test subscript {attribute access using subscript operator} -body {
    exec $testdir/../../dli/durodt << {
        var t init tup{a 'xy'};
        io.put_line(t['a']);
        try
            io.put_line(t['b']);
            io.put_line('accessing t.b succeeded');
        catch err name_error;
            ;
        end try;
        try
            io.put_line(t[0]);
            io.put_line('integer as attribute name succeeded');
        catch err type_mismatch_error;
            ;
        end try;
        t["a"] := 'zz';
        io.put_line(t.a);
        try
            t["b"] := 'yy';
            io.put_line('assignment of t.b succeeded');
        catch err name_error;
            ;
        end try;
        try
            t[1] := 'yy';
            io.put_line('integer as attribute name succeeded');
        catch err type_mismatch_error;
            ;
        end try;
    }
} -result {xy
zz
}

cleanupTests
