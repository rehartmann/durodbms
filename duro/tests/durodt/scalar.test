#!/bin/sh
# Execute tclsh from the user's PATH \
exec tclsh "$0" ${1+"$@"}

#
# Test scalar definitions and operations
#

package require tcltest 2.2
eval ::tcltest::configure $argv
namespace import ::tcltest::*

set testdir [::tcltest::configure -testdir]

source $testdir/setup.tcl

test scalar_builtin {built-in scalar definitions and operators} -body {
    exec $testdir/../../dli/durodt $testdir/scalar.td
} -result {2
3
AB%&/
XX
FALSE
Aj
 %
error caught
}

test scalar_builtin_types_pr {built-in scalar types with possreps} -body {
    exec $testdir/../../dli/durodt << {

        var inv_arg_err invalid_argument_error;
        io.put_line(the_msg(inv_arg_err));

        var nrt_err no_running_transaction_error;

        var type_mismatch_err type_mismatch_error;

        var not_found_err not_found_error;

        var op_not_found_err operator_not_found_error;

        var name_err name_error;

        var element_exists_err element_exists_error;

        var type_constraint_violation_err type_constraint_violation_error;

        var key_violation_err key_violation_error;

        var predicate_violation_err predicate_violation_error;

        var aggregate_undefined_err aggregate_undefined_error;

        var version_mismatch_err version_mismatch_error;

        var not_supported_err not_supported_error;

        var syntax_err syntax_error;

        var in_user_err in_use_error;

        var no_mem_err no_memory_error;

        var sys_err system_error;

        var concurrency_err concurrency_error;

        var deadlock_err deadlock_error;

        var res_not_found_err resource_not_found_error;

        var internal_err internal_error;

        var run_recovery_err run_recovery_error;

        var data_corrupted_err data_corrupted_error;

        var id identifier;
    }
} -result {
}

test casts {cast operators} -body {
    exec $testdir/../../dli/durodt << {
	    io.put(cast_as_integer('11')); io.put_line('');
	    io.put(cast_as_int('-7')); io.put_line('');
	    io.put(cast_as_integer(-3.0)); io.put_line('');
	    io.put(cast_as_int(5.1)); io.put_line('');
	
	    io.put(cast_as_float('1.1')); io.put_line('');
	    io.put(cast_as_rational('-5.3')); io.put_line('');
	    io.put(cast_as_rat('4.0')); io.put_line('');
	    io.put(cast_as_float(1)); io.put_line('');
	    io.put(cast_as_rational(2)); io.put_line('');
	    io.put(cast_as_rat(0)); io.put_line('');

	    io.put_line(cast_as_string(500));
	    io.put_line(cast_as_char(-13));
	    io.put_line(cast_as_string(-34.552));
	    io.put_line(cast_as_char(0.0));
	    
	    io.put_line(cast_as_string(X'446f'));
    }
} -result {11
-7
-3
5
1.1
-5.3
4.0
1.0
2.0
0.0
500
-13
-34.552
0.0
Do
}

test deftype {user-defined types} -setup $SETUP -cleanup $CLEANUP -body {
    exec $testdir/../../dli/durodt -e $dbenvname << {
        current_db := 'D';
        begin tx;
        type t
            possrep ( a integer, b integer )
            init t(0, 0);

        -- Test invalid possrep
        try
            type invt possrep (
                t1 tup { a int },
                t2 tup { * }
            ) init ut(0);
            io.put_line(io.stderr, 'invalid possrep was accepted');
        catch err syntax_error;
            ;
        end try;
        commit;
    }
    exec $testdir/../../dli/durodt -e $dbenvname -d D << {
        begin tx;
        -- Test declaration w/ incomplete types
        try
            var vt t;
        catch err;
            io.put_line('error #1 caused by incomplete type caught');
        end try;

        implement type t;
        end implement;
        commit;

        -- Check selector access w/o tx
        var v init t(0, 0);
        
        io.put(the_a(v)); io.put_line('');
        io.put(the_b(v)); io.put_line('');

        v := t(1, 2);
        io.put(the_a(v)); io.put_line('');
        io.put(the_b(v)); io.put_line('');
        io.put(v.a); io.put_line('');
        io.put(v.b); io.put_line('');

        the_a(v) := 5;
        io.put(the_a(v)); io.put_line('');
        v.a := 66;
        io.put(the_a(v)); io.put_line('');

        try
            the_a(v) := '5';
            io.put_line('property assignment with wrong source type succeeded');
        catch err type_mismatch_error;
            ;
        end try;

        begin tx;
        var v2 t;
        commit;
        drop var v2;

        -- Check multiple assignment
        the_a(v) := 9; the_b(v) := -7;
        io.put(the_a(v)); io.put_line('');
        io.put(the_b(v)); io.put_line('');

        var i int;
        the_a(v) := 15; i := 4;
        io.put(the_a(v)); io.put_line('');
        io.put(the_b(v)); io.put_line('');
        io.put(i); io.put_line('');

        -- Conflicting assignment
        try
            the_a(v) := 24, the_a(v) := 42;
		catch ex syntax_error;
		    io.put_line('invalid assignment caught');
		end try;     

        -- Dropping t must fail because v still exists
        begin tx;
        try
            drop type t;
		catch ex in_use_error;
		    io.put_line('caught in_use_error');
		end try;

        drop var v;

        var r real rel { t t };
        
        insert r tup { t t(1, 1) };
 
        var a array tup same_heading_as(r);
        load a from r order();

        try
            load a from r order(t asc);
            io.put_line('usage of non-ordered type t in order clause succeeded');
        catch err invalid_argument_error;
            ;
        end try;

        var tp tup same_heading_as(r);

        try
            for tp in r order(t asc);
                ;
            end for;
            io.put_line('usage of non-ordered type t in order clause succeeded');
        catch err invalid_argument_error;
            ;
        end try;

        drop var r;

        try
            -- Must fail because a depends on the type
            drop type t;
            io.put_line('dropping type succeeded despite variable a depending on it');
        catch ex in_use_error;
            ;
        end try;
            
        drop var a;

        try
            -- Must fail because tp depends on the type
            drop type t;
            io.put_line('dropping type succeeded despite variable tp depending on it');
        catch ex in_use_error;
            ;
        end try;

        drop var tp;

        drop type t;

        try
            type string5 possrep (value string) constraint strlen(val) <= 5
                    init string5('');
		catch ex name_error;
		    io.put_line('caught name_error');
		end try;        

        type string5 possrep (value string) constraint strlen(value) <= 5
                init string5('');

        -- Test table declaration w/ incomplete type
        try
            var pr private rel {id int, s5 string5} key {id};
        catch err;
            io.put_line('error #2 caused by incomplete type caught');
        end try;

        implement type string5;
        end implement;

        var s string5;

        s := string5('OK');

        try
        	s := string5('Too long');
        catch err type_constraint_violation_error;
            io.put_line('type constraint violation caught');
        end try;

        the_value(s) := '12345';
        commit;        
    }
} -result {error #1 caused by incomplete type caught
0
0
1
2
1
2
5
66
9
-7
15
-7
4
invalid assignment caught
caught in_use_error
caught name_error
error #2 caused by incomplete type caught
type constraint violation caught
}

test deftype_oldsyntax {user-defined types with old possrep syntax} -setup $SETUP -cleanup $CLEANUP -body {
    exec $testdir/../../dli/durodt -e $dbenvname << {
        current_db := 'D';
        begin tx;
        type t1
            possrep { a integer, b integer }
            init t1(0, 0);

        implement type t1;
        end implement;

        type t2
            possrep p { a integer, b integer }
            init p(0, 0);

        implement type t2;
        end implement;

        var t1 t1;
        t1 := t1(1, 1);
        io.put(t1.a);
        io.put(' ');
        io.put(t1.b);
        io.put_line('');

        var t2 t2;
        t2 := p(1, 1);
        io.put(t2.a);
        io.put(' ');
        io.put(t2.b);
        io.put_line('');
    }
} -result {1 1
1 1
}

test deftypemr {user-defined type with multiple possreps} -setup $SETUP -cleanup $CLEANUP -body {
    exec $testdir/../../dli/durodt -e $dbenvname << {
        current_db := 'D';
        begin tx;
		type fixed2
		    possrep fixed2r ( r rational )
		    possrep fixed2i ( i integer )
		    init fixed2i(0);

		implement type fixed2 as integer;
		
			operator fixed2r(r rational) returns fixed2;
				return cast_as_integer(r*100.0);
			end operator;
	
			operator fixed2i(i integer) returns fixed2;
				return i;
			end operator;
	
			operator get_r(f2 fixed2) returns rational;
				return cast_as_rational(f2) / 100.0;
			end operator;
	
			operator set_r(f2 fixed2, r rational) updates {f2};
				f2 := cast_as_integer(r*100.0);
			end operator;
	
			operator get_i(f2 fixed2) returns integer;
				return f2;
			end operator;
	
			operator set_i(f2 fixed2, i integer) updates {f2};
				f2 := i;
			end operator;

		end implement;
		commit;

        var f1 fixed2;
        var f2 init fixed2r(1.00);
        var f3 init fixed2i(100);
    }
    exec $testdir/../../dli/durodt -e $dbenvname -d D << {
        var f1 fixed2;
        var f2 init fixed2r(1.23);
        var f3 init fixed2i(321);

        io.put(the_i(f1)); io.put_line('');
        io.put(the_r(f1)); io.put_line('');
        io.put(the_i(f2)); io.put_line('');
        io.put(the_r(f2)); io.put_line('');
        io.put(the_i(f3)); io.put_line('');
        io.put(the_r(f3)); io.put_line('');

        the_i(f1) := 20;
        io.put(the_i(f1)); io.put_line('');
        io.put(the_r(f1)); io.put_line('');

        var p private relation {id int, amount fixed2} key {id};
        
        insert p rel { tuple { id 1, amount fixed2r(3.5) },
                       tuple { id 2, amount fixed2i(1420) } };

        var tp tuple same_heading_as(p);

        for tp in p order(id asc);
             io.put(the_i(tp.amount)); io.put_line('');
             io.put(format("%.5g", the_r(tp.amount))); io.put_line('');
        end for;

        var p2 private relation {id int, amount fixed2}
                init rel { tuple { id 1, amount fixed2r(500.5) },
                       tuple { id 2, amount fixed2i(20015) } };

        for tp in p2 order(id asc);
             io.put(the_i(tp.amount)); io.put_line('');
             io.put(format("%.5f", the_r(tp.amount))); io.put_line('');
        end for;
    }
} -result {0
0.0
123
1.23
321
3.21
20
0.2
350
3.5
1420
14.2
50050
500.50000
20015
200.15000
}

test deftypemri {user-defined type with multiple possreps and incomplete implementation} -setup $SETUP -cleanup $CLEANUP -body {
    exec $testdir/../../dli/durodt -e $dbenvname << {
        current_db := 'D';
        begin tx;
		type fixed2
		    possrep fixed2r ( r rational )
		    possrep fixed2i ( i integer )
		    init fixed2i(0);

        try
			implement type fixed2 as integer;
			
				operator fixed2r(r rational) returns fixed2;
					return cast_as_integer(r*100.0);
				end operator;
		
				operator fixed2i(i integer) returns fixed2;
					return i;
				end operator;
		
				operator get_r(f2 fixed2) returns rational;
					return cast_as_rational(f2) / 100.0;
				end operator;
		
				operator set_r(f2 fixed2, r rational) updates {f2};
					f2 := cast_as_integer(r*100.0);
				end operator;
		
				operator get_i(f2 fixed2) returns integer;
					return f2;
				end operator;
	
			end implement;
        catch err operator_not_found_error;
            io.put_line('operator_not_found_error');
        end try;
        commit;

        try
            var f1 fixed2;
        catch err;
            io.put_line('declaration with unimplemented type caught');
        end try;
    }
} -result {operator_not_found_error
declaration with unimplemented type caught
}

test deftypemarr {user-defined type with multiple possreps and array component} -setup $SETUP -cleanup $CLEANUP -body {
    exec $testdir/../../dli/durodt -e $dbenvname << {
        current_db := 'D';

        begin tx;
		type text
		    possrep lines ( lines array string )
		    possrep text ( text string )
		init lines(array string());
		
		implement type text as array string;

		operator lines(l array string) returns text;
		    return l;
		end operator;
		
		operator get_lines(t text) returns array string;
		    return t;
		end operator;
		
		operator set_lines(t text, l array string) updates { t };
		    t := l;
		end operator;
		
		operator text(t string) returns text;
		    return array(t);
		end operator;
		
		operator set_text(t text, s string) updates { t };
		    -- not quite correct, but that's not important here
		    t := array(s);
		end operator;
		
		operator get_text(t text) returns string;
		    var i int;
		    var s string;
		    for i := 0 to length(t) - 1;
		        if i > 0 then
		            s := s || "\n";
		        end if;
		        s := s || t[i];
		    end for;
		    return s;
		end operator;
		
		end implement;
		commit;        

        begin tx;
        var i int;
        var t text;
        t := lines(array('one','two'));
        io.put_line(the_text(t));
        
        for i := 0 to length(the_lines(t)) - 1;
            io.put_line(the_lines(t)[i]);
        end for;

        length(the_lines(t)) := 4;
        io.put_line(the_text(t));

        length(t.lines) := 3;
        io.put_line(t.text);

        length(the_lines(t)) := 1;
        for i := 0 to length(the_lines(t)) - 1;
            io.put_line(the_lines(t)[i]);
        end for;
        
        try
            length(the_text(t)) := 1;
            io.put('assignment to length(string) succeeded');
        catch err type_mismatch_error;
            ;
        end try;
        commit;
    }
} -result {one
two
one
two
one
two


one
two

one
}

test deftypearr {system implemented user-defined type with array component} -setup $SETUP -cleanup $CLEANUP -body {
    exec $testdir/../../dli/durodt -e $dbenvname << {
        current_db := 'D';

        begin tx;
		type text2
		    possrep lines ( lines array string )
		init lines(array string());

		implement type text2;
		end implement;
		commit;

        begin tx;
        var i int;
        var t text2;
        t := lines(array('one','two'));
        
        for i := 0 to length(t.lines) - 1;
            io.put_line(t.lines[i]);
        end for;

        length(t.lines) := 3;

        for i := 0 to length(t.lines) - 1;
            io.put_line(t.lines[i]);
        end for;

        length(the_lines(t)) := 1;
        for i := 0 to length(the_lines(t)) - 1;
            io.put_line(t.lines[i]);
        end for;
        commit;
    }
} -result {one
two
one
two

one
}

test deftypearr2 {system implemented user-defined type with array and scalar component} -setup $SETUP -cleanup $CLEANUP -body {
    exec $testdir/../../dli/durodt -e $dbenvname << {
        current_db := 'D';

        begin tx;
		type text2
		    possrep lines ( lines array string, n int )
		init lines(array string(), 0);

		implement type text2;
		end implement;
		commit;

        begin tx;
        var i int;
        var t text2;
        t := lines(array('one','two'), 1);
        
        for i := 0 to length(t.lines) - 1;
            io.put_line(t.lines[i]);
        end for;

        length(t.lines) := 3;

        for i := 0 to length(t.lines) - 1;
            io.put_line(t.lines[i]);
        end for;

        length(t.lines) := 1;
        for i := 0 to length(t.lines) - 1;
            io.put_line(t.lines[i]);
        end for;
        commit;
    }
} -result {one
two
one
two

one
}

test deftypecmp {user-defined type with comparison operator} -setup $SETUP -cleanup $CLEANUP -body {
    exec $testdir/../../dli/durodt -e $dbenvname << {
        current_db := 'D';
        var cmp_invoked init false;
        begin tx;

		type physical_length ordered possrep meters ( m float ) init meters(0.0);

		operator physical_length_cmp(l1 physical_length, l2 physical_length) returns int;
		    cmp_invoked := true;
		    case
		        when the_m(l1) < the_m(l2) then return -1;
		        when the_m(l2) > the_m(l2) then return 1;
		        else return 0;
		    end case;
		end operator;

		implement type physical_length;
		end implement;

		io.put(meters(0.0) < meters(1.0));
		io.put_line('');

		io.put(meters(1.0) < meters(1.0));
		io.put_line('');
		
		io.put(meters(0.0) <= meters(1.0));
		io.put_line('');

		io.put(meters(1.0) <= meters(1.0));
		io.put_line('');
		
		io.put(meters(0.0) > meters(1.0));
		io.put_line('');

		io.put(meters(1.0) > meters(1.0));
		io.put_line('');
		
		io.put(meters(0.0) >= meters(1.0));
		io.put_line('');

		io.put(meters(1.0) >= meters(1.0));
		io.put_line('');
		
		commit;

		begin tx;
		drop operator physical_length_cmp;
		drop type physical_length;
		commit;
		
		if not cmp_invoked then
		    io.put_line('compare operator not invoked');
		end if;

		begin tx;
		
		type pname ordered
		    possrep full_name ( full_name string )
		    possrep given_family ( given_name string, family_name string )
		init given_family('','');
		
		try
		
			implement type pname as tuple { gname string, fname string };
			
			  operator full_name(name string) returns pname;
			    var pos int init index_of(name, ' ');
			    var len int init strlen(name);
			    return tuple { gname substr(name, pos + 1, len - pos - 1), fname substr(name, 0, pos) };
			  end operator;
			
			  operator get_full_name(n pname) returns string;
			    return n.fname || ' ' || n.fname;
			  end operator;
			
			  operator set_full_name(pn pname, name string) updates {pn};
			    var pos int init index_of(name, ' ');
			    var len int init strlen(name);
			    update pn { gname := substr(name, pos + 1, len - pos - 1), fname := substr(name, 0, pos) };
			  end operator;
			
			  operator given_family(gname string, fname string) returns pname;
			    return tuple { gname gname, fname fname };
			  end operator;
			
			  operator get_given_name(pn pname) returns string;
			    return pn.gname;
			  end operator;
			
			  operator set_given_name(pn pname, gn string) updates { pn };
			    update pn { gname := gn };
			  end operator;
			
			  operator get_family_name(pn pname) returns string;
			    return pn.fname;
			  end operator;
			
			  operator set_family_name(pn pname, fn string) updates { pn };
			    update pn { fname := fn };
			  end operator;
			
			end implement;
	
		    io.put_line('implement type succeeded despite missing comparison op');

		catch err operator_not_found_error;
		    ;
		end try;

		operator pname_cmp(pn1 pname, pn2 pname) returns int;
		   case
		       when the_family_name(pn1) < the_family_name(pn2) then return -1;
		       when the_family_name(pn1) > the_family_name(pn2) then return 1;
		       else case
		           when the_given_name(pn1) < the_given_name(pn2) then return -1;
		           when the_given_name(pn1) > the_given_name(pn2) then return 1;
		           else return 0;
		       end case;
		   end case;
		end operator;           
		
		implement type pname as tuple { gname string, fname string };
		
		  operator full_name(name string) returns pname;
		    var pos int init index_of(name, ' ');
		    var len int init strlen(name);
		    return tuple { gname substr(name, pos + 1, len - pos - 1), fname substr(name, 0, pos) };
		  end operator;
		
		  operator get_full_name(n pname) returns string;
		    return n.gname || ' ' || n.fname;
		  end operator;
		
		  operator set_full_name(pn pname, name string) updates {pn};
		    var pos int init index_of(name, ' ');
		    var len int init strlen(name);
		    update pn { gname := substr(name, pos + 1, len - pos - 1), fname := substr(name, 0, pos) };
		  end operator;
		
		  operator given_family(gname string, fname string) returns pname;
		    return tuple { gname gname, fname fname };
		  end operator;
		
		  operator get_given_name(pn pname) returns string;
		    return pn.gname;
		  end operator;
		
		  operator set_given_name(pn pname, gn string) updates { pn };
		    update pn { gname := gn };
		  end operator;
		
		  operator get_family_name(pn pname) returns string;
		    return pn.fname;
		  end operator;
		
		  operator set_family_name(pn pname, fn string) updates { pn };
		    update pn { fname := fn };
		  end operator;

		end implement;

		var name pname;
		name := given_family('Ronnie', 'Relational');
		io.put_line(the_full_name(name));

		commit;
	}
} -result {TRUE
FALSE
TRUE
TRUE
FALSE
FALSE
FALSE
TRUE
Ronnie Relational
}

test defroop {read-only user-defined operators} -setup $SETUP -cleanup $CLEANUP -body {
    exec $testdir/../../dli/durodt -e $dbenvname -d D << {
        operator testop() returns string;
            var a integer;
            var b integer init 1;
            var c integer;

            if a <> 0 then
                return "error: a <> 0";
            end if;

            if a = 0 then
            begin;
                a := a + 1;
            end;
            else
                return "error: (a = 0) is false";
            end if;

            var i init 0;
            drop var c;
            var c init 1;
            while i < 3;
                var one init 1;
                i := i + one;
                c := c * 2;
            end while;

            var d init 1;
            for i:= 1 to 3;
                d := d * 2 + 1;
            end for;

            return "a = " || cast_as_string(a) || ", b = " || cast_as_string(b)
                     || ", c = " || cast_as_string(c) || ", d = " || cast_as_string(d);
        end operator;

        /*
         * Reverse string
         */
        operator reverse(s string) returns string;
            var res string;	-- automatically initialized to ''

            var i integer init strlen(s) - 1;
            while i >= 0;
                res := res || substr(s, i, 1);
                i := i - 1;
            end while;
            return res;
        end operator;

        operator fib(n integer) returns integer;
            return if n < 2 then n else fib(n - 1) + fib(n - 2);
        end operator;

        operator sgn(n integer) returns integer;
            case
                when n < 0 then return -1;
                when n > 0 then return 1;
                else return 0;
            end case;
        end operator;

        current_db := 'D';
        begin tx;

        io.put_line(testop());

        io.put_line(reverse("Madam, I'm Adam."));

        commit;

        begin tx;

        io.put(fib(6)); io.put_line('');

        io.put(sgn(5)); io.put_line('');
        io.put(sgn(0)); io.put_line('');

        drop operator testop;

        operator test4params(a int, b string, c int, d boolean) returns string;
            return cast_as_string(a) || b || cast_as_string(c)
                    || (if d then 'y' else 'n');
        end operator;
        
        io.put_line(test4params(1, 'x', 5, true));

        -- Try to modify variable through read-only operator
        operator illegal_update(i int) returns int;
            i := i + 1;
            return i;
        end operator;

        try
            var i int;
            io.put(illegal_update(i));
            io.put_line(' updating varible through read-only operator succeeded');
        catch e name_error;
            ;
        end try;

        commit;
    }
} -result {a = 1, b = 1, c = 8, d = 15
.madA m'I ,madaM
8
1
0
1x5y
}

test defupdop {user-defined update operators} -setup $SETUP -cleanup $CLEANUP -body {
    exec $testdir/../../dli/durodt -e $dbenvname << {
        current_db := 'D';
        begin transaction;

        operator op(s string, i integer) updates {s};
            type length_t possrep ( m FLOAT ) constraint (m >= 0.0)
                    init length_t(0.0);

            operator op1(s string) returns string;
                return s || 'y';
            end operator;

            operator op2(s string) updates { s };
                s := s || 'z';
            end operator;

            s := op1(cast_as_string(i));
            op2(s);

            return;
        end operator;

        var a string init 'x';
        var b integer init 1;
        op(a, b);
        io.put_line("a = " || a);

        drop operator op1;
        drop operator op2;

        drop type length_t;

        op(a, b);

        drop operator op1;
        drop operator op2;

        drop type length_t;

        drop var a;

        try
            operator op2(i int, j int) updates { k };
            ;
            end operator;
        catch err invalid_argument_error;
            io.put_line('invalid updates caught');
        end try;

        operator test5paramsu(a int, b string, c int, d boolean, e string)
                updates { e };
            e := cast_as_string(a) || b || cast_as_string(c)
                    || (if d then 'y' else 'n');
        end operator;

        var e string;
        test5paramsu(1, 'x', 5, true, e);
        io.put_line(e);

        try
            operator type_and_name_wrong_order(string name, string value) updates {};
                ;
            end operator;
            io.put_line('reversed order of parameter name and type accepted in update operator definition');
        catch err type_not_found_error;
            ;
        end try;

        operator pfloatc() updates {};
            io.put(5e+40);
            io.put_line('');
            io.put(5.0e40);
            io.put_line('');
            io.put(2.0e-30);
            io.put_line('');
        end operator;		

        pfloatc();

        commit;
    }
} -result {a = 1yz
invalid updates caught
1x5y
5e+40
5e+40
2e-30
}

test typeinf {type inference} -setup $SETUP -cleanup $CLEANUP -body {
    exec $testdir/../../dli/durodt -e $dbenvname << {
        current_db := 'D';
        operator zero() returns int;
            return 0;
        end operator;
    }
    exec $testdir/../../dli/durodt -e $dbenvname << {
        current_db := 'D';
        var i same_type_as(zero());
        var j init zero();
        io.put(i); io.put(' '); io.put(j); io.put_line('');
    }
} -result {0 0
}

test trycatch {TRY .. CATCH} -setup $SETUP -cleanup $CLEANUP -body {
    exec $testdir/../../dli/durodt -e $dbenvname << {
        current_db := 'D';
        begin transaction;

        operator test() updates {};
            var s string;
            try
                s := substr('x', 1, 1);
            catch err NAME_ERROR;
                io.put_line('caught NAME_ERROR');
            catch err;
                io.put_line('caught');
            end try;
        end operator;

        test();

        commit;
    }
} -result {caught
}

test getenv {GETENV operator} -setup $SETUP -cleanup $CLEANUP -body {
    set ::env(TEST) DUROTEST

    exec $testdir/../../dli/durodt -e $dbenvname << {
        io.put_line(os.getenv('TEST'));
    }
} -result {DUROTEST
}

test with {WITH expression} -body {
    exec $testdir/../../dli/durodt << {
        io.put(WITH (C := 100): WITH (A := 7, B := C): A+B); io.put_line('');
        
        -- empty WITH
        io.put(WITH (): 7); io.put_line('');
    }
} -result {107
7
}

test like {LIKE operator} -body {
    exec $testdir/../../dli/durodt << {
        io.put_line(if 'abc' like '?bc' then 'true' else 'false');
        io.put_line(if 'aabc' like '?bc' then 'true' else 'false');
        io.put_line(if 'abc' like 'a*c' then 'true' else 'false');
        io.put_line(if 'ac' like 'a*c' then 'true' else 'false');
        io.put_line(if 'aca' like 'a*c' then 'true' else 'false');
        io.put_line(if '\x' like '\?' then 'true' else 'false');
        io.put_line(if 'a/b' like 'a?b' then 'true' else 'false');
        io.put_line(if 'ab/cd/eF' like 'a*F' then 'true' else 'false');
        io.put_line(if 'ab/cd/eF' like 'a\/*F' then 'true' else 'false');
    }
} -result {true
false
true
true
false
true
true
true
false
}

test www {Web operators} -body {
    exec $testdir/../../dli/durodt << {
	    var tp init tup {aa 'x', b 'x', n 1, f 2.0}; 

	    net.form_to_tuple(tp, 'aa=Y%2Bx+z&f=1.2&n=2'); 

	    io.put_line(tp.aa);
	    io.put_line(tp.b);
	    io.put(tp.n); io.put_line('');
        io.put(tp.f); io.put_line('');

        -- Check that invalid input does not crash the decoder 

	    net.form_to_tuple(tp, 'aa=%fg&b=%5');
	    net.form_to_tuple(tp, 'n=$&aa=%5');
	}
} -result {Y+x z
x
2
1.2
}

test parser {Parser} -match glob -body {
    catch {
        exec $testdir/../../dli/durodt << {
            -- Invalid character
            io.put ($);
        }
    } res
    puts $res
} -output {*syntax_error*}

test strlen {strlen operators} -body {
    exec $testdir/../../dli/durodt << {
        io.put_line(cast_as_string(strlen('Yo ho')));
        var s string init '%$Yo ho';
        io.put_line(cast_as_string(strlen_b(s)));
	}
} -result {5
7
}

test strfind {strfind_b operators} -body {
    exec $testdir/../../dli/durodt << {
        var s init 'Hoola hoola';    
    
        io.put_line(cast_as_string(strfind_b(s, 'ola ')));
        io.put_line(cast_as_string(strfind_b(s, 'ola', 5)));
	}
} -result {2
8
}

test substr {substr operators} -body {
    exec $testdir/../../dli/durodt << {    
        io.put_line(substr('abcdef', 2, 2));
        io.put_line(substr_b('abcdef', 3, 2));
        io.put_line(substr_b('abcdef', 4));

        var s string;

        try
            s := substr('abcdef', 4, 3);
            io.put_line('invalid substr() succeeded');
        catch err invalid_argument_error;
            ;
        end try; 
        try
            s := substr_b('abcdef', 5, 2);
            io.put_line('invalid substr_b() (3 args) succeeded');
        catch err invalid_argument_error;
            ;
        end try;
        try
            s := substr_b('abcdef', 7);
            io.put_line('invalid substr_b() (2 args) succeeded');
        catch err invalid_argument_error;
            ;
        end try;            
	}
} -result {cd
de
ef
}

test datetime {datetime type} -body {
    exec $testdir/../../dli/durodt << {
        var d datetime;
        d := datetime(1948, 12, 10, 3, 0, 1);
        io.put_line(cast_as_string(d));

        the_year(d) := 2057;
        the_month(d) := 3;
        the_day(d) := 25;
        the_hour(d) := 18;
        the_minute(d) := 5;
        the_second(d) := 7;

        io.put(d);
        io.put_line('');
        io.put(the_year(d));
        io.put_line('');
        io.put(the_month(d));
        io.put_line('');
        io.put(the_day(d));
        io.put_line('');
        io.put(the_hour(d));
        io.put_line('');
        io.put(the_minute(d));
        io.put_line('');
        io.put(the_second(d));
        io.put_line('');

        -- 2000 is a leap year
        d := datetime(2000, 2, 29, 0, 0, 0);

        -- 2100 is not a leap year
        try
        	d := datetime(2100, 2, 29, 0, 0, 0);
        	io.put_line('2100-02-29 was accepted');
        catch err type_constraint_violation_error;
            ;
        end try;        
    }
} -result {1948-12-10T03:00:01
2057-03-25T18:05:07
2057
3
25
18
5
7
}

test const {constants} -setup $SETUP -cleanup $CLEANUP -body {
    exec $testdir/../../dli/durodt -e $dbenvname << {
        const ic 24;

        io.put_line(cast_as_string(ic));

        io.put(ic);
        io.put_line('');

        io.put(3 * ic);
        io.put_line('');

        try
            ic := 5;
            io.put_line('assigning constant succeeded');
        catch err name_error;
            ;
        end try;

        current_db := 'D';
        begin tx;

        operator copy_i(dst int, src int) updates {dst};
            dst := src;
        end operator;

        var i int;
        copy_i(i, ic);
        io.put_line(cast_as_string(i));

        try
            copy_i(ic, i);
            io.put_line('passing constant as update argument succeeded');
        catch err invalid_argument_error;
            ;
        end try;

        commit;
    }
} -result {24
24
72
24
}

test format {printf-style formatting} -body {
    exec $testdir/../../dli/durodt << {
        io.put_line(format('%%!%5.2fxx%03d %s.', 1.2, 12, 'foo '));
        
        try
            io.put_line(format('%d %s', 2, 3));
            io.put_line('passing integer when string is expected not caught');
        catch err type_mismatch_error;
            ;
        end try;

        try
            io.put_line(format(' %d'));
            io.put_line('missing integer arg not caught');
        catch err invalid_argument_error;
            ;
        end try;
    }
} -result {%! 1.20xx012 foo .
}

test limits {arithmetic overflow} -body {
    exec $testdir/../../dli/durodt << {
        var v init 2000000000;
        
        try
            v := v + 2000000000;
            var s init cast_as_string(v);
            io.put_line(if s = '4000000000' then 'ok' else s);
        catch e type_constraint_violation_error;
            io.put_line('ok');
        end try;
    }
} -result {ok
}

test versionroop {read-only operators with version names} -setup $SETUP \
        -cleanup $CLEANUP -body {
    exec $testdir/../../dli/durodt -e $dbenvname -d D << {
        operator append1(n integer) returns string version i;
            return cast_as_string(n) || '1';
        end operator;

        operator append1(s string) returns string version s;
            return s || '1';
        end operator;

        begin tx;        
        io.put_line(append1(2));
        io.put_line(append1('x'));
        commit;

        begin tx;
        drop operator append1 version i;
        try
            io.put_line(append1(2));
            io.put_line('invocation of append1 version i succeeded');
        catch e type_mismatch_error;
            ;
        end try;

        io.put_line(append1('x'));
        commit;

        begin tx;
        drop operator append1;
        
        try
            io.put(append1('y'));
            io.put_line("operator call succeeded after drop operator");
        catch err operator_not_found_error;
            ;
        end try;
        commit;
    }
} -result {21
x1
x1
}

test versionupdop {update operators with version names} -setup $SETUP \
        -cleanup $CLEANUP -body {
    exec $testdir/../../dli/durodt -e $dbenvname -d D << {
        operator append1(s1 string, s2 string) updates { s1 } version s;
            s1 := s1 || s2;
        end operator;

        operator append1(s string, n int) updates { s } version i;
            s := s || cast_as_string(n);
        end operator;

        begin tx;
        var s init 'x';
        append1(s, 'y');
        append1(s, 1);
        io.put_line(s);
        commit;  

        s := '';
        begin tx;
        drop operator append1 version s;
        try
            append1(s, 'x');
        catch e type_mismatch_error;
            ;
        end try;
        append1(s, 1);
        io.put_line(s);

        commit;

        begin tx;
        drop operator append1;

        try
            append1(s, 5);
            io.put_line("operator call succeeded after drop operator");
        catch err operator_not_found_error;
            ;
        end try;
        commit;
    }
} -result {xy1
1
}

test upperlower {upper() and lower()} -body {
    exec $testdir/../../dli/durodt << {
        io.put_line(lower('testTEST'));
        io.put_line(upper('testTEST'));
    }
} -result {testtest
TESTTEST
}

test nan {NaN} -body {
    exec $testdir/../../dli/durodt << {
        var f init NaN;
        
        io.put_line(if f = NaN then 'true' else 'false');
        io.put_line(if f = 0.0 then 'true' else 'false');
        io.put_line(if 1.0 = f then 'true' else 'false');
    }
} -result {true
false
false
}

cleanupTests
