Summary of Changes to DuroDBMS

DuroDBMS 1.8

- Supporting tuple access using the subscript operator. 

- Fixed bug that prevented non-update relation variable arguments from
  being used in LOAD and FOR .. IN.

- Generic relation types are now allowed in operator parameters.

- Added heading operator.

DuroDBMS 1.7

- Added support for FoundationDB as storage engine.

- As part of the support for FoundationDB, added automatic restart of
  failed statements when implicit transactions are enabled.

- As part of the support for FoundationDB, added function RDB_err_retryable()
  and read-only operator retryable() (the latter only being available in Duro D/T)
  to determine whether a failed operation should be restarted.

- Renamed lock_not_granted_error to concurrency_error.

- Fixed problems in ||, upper(), and lower() which could cause the string
  length being set incorrectly.

- Fixed bug that caused the program to crash when sorting using an index.

- Added support for NaN.

DuroDBMS 1.6

- GNU Libtool is no longer required on Windows.

- If POSIX regular expressions are not available, C++ regular expressions are used.

- Moved to Berkeley DB 18.1.

- Fixed bug in storing relations without attributes.

- Fixed bug in expression serialization.

- Fixed bug in secondary indexes of in-memory tables.

DuroDBMS 1.5

- Fixed bug that can cause WRAP to crash.

- Moved to OpenJDK 10.

DuroDBMS 1.4

- Added option to build DuroDBMS without Berkeley DB.

- Moved to Berkeley DB 6.2. (Not on Windows, because DuroDBMS does not work with
  Berkeley DB 6.2 on Windows XP)

- Fixed bug that prevented recreation of a renamed table.

- lower() and upper() convert multibyte characters.

- Fixed bug that caused memory leaks when dropping local variables.

- Fixed bug that made the interpreter crash when trying to access dropped local variables.

- Fixed creation of local tables with multiple keys when an environment is open.

- Fixed problem with updating private tables that could cause a tuple to disappear
  after an update that failed because of a key violation.

- Added handling of types with possible represenations to the REST server and its Java client.

- Java REST client: Fixed handling of arrays when converting from JSON.

DuroDBMS 1.3

- Added functions lower(), upper()

- Added backtick quoting of identifiers

- Added PostgreSQL support

- Added REST server srv/durod and Java client support for accessing a database using HTTP/REST.

- RDB_create_recmap() etc. return errors using an RDB_exec_context.

DuroDBMS 1.2

- Added a limited form of subtyping. Only dummy types can be supertypes.

- Added operator versions.

- Added checking for integer overflow. An integer overflow results in a
  type_constraint_violation_error being raised.

- Updating arguments of read-only operators and read-only arguments of
  update operators results in a runtime error.

- Renamed Duro_print_error() as Duro_println_error(). The output of
  Duro_print_error_f() is no longer followed by a newline.

- Removed RDB_obj_set_const() and RDB_obj_is_const().

- Added read-only operators % (modulus), abs(), pow(), exp(), ln(), and log().

- Added operators os.chdir() and io.popen().

- Moved exit() operators to package 'os'. 

- Possrep components are enclosed in parens instead of braces.
  (The old syntax is still supported)

- Added script for database environment upgrade.

DuroDBMS 1.1

- Accessing properties is now possible using value.property in addition
  to the_property(value).

- Added read-only operators serialize(), add_seconds(), weekday(), local_to_utc(),
  and format() to libduro.

- Added RDB_obj_to_bin() and RDB_bin_to_obj() to rel/rdb.h.
  Removed internal functions from rel/serialize.h.

- Renamed RDB_expr_comp() as RDB_expr_property().

DuroDBMS 1.0

- Renamed datetime properties min and sec to minute and second, respectively.

- Statements of the form the_length(the_property(v)) := ... are now supported
  for array-valued properties. 

- Duro D/T now supports a CONST statement.

- The second parameter of aggregate operators SUM, AVG, MAX, MIN, ALL, AND, ANY, OR
  can be an expresssion and is optional if the relation has only one attribute.
  The second argument of RDB_min() etc. is now of type RDB_expression *. 

- Added Duro_rollback_all().

- Made datetime type ordered.

- Fixed bug in RDB_drop_table_index().

- Fixed bug with concurrent access when the first tuple is inserted into a table.

- Added RDB_is_array().

- Added getfn/getarg arguments to RDB_multi_assign(), allowing variables
  in updates.

DuroDBMS 0.26

- Duro D/T: Replaced MODULE by PACKAGE.

- Duro D/T: It is now possible to omit the package name when calling a
  user-defined update operator from another operator that belongs to the same
  package.

- Duro D/T: Updating tuples using t.attr := v is now supported in addition to
  UPDATE t { attr := v }.

- Duro D/T: Added D_INSERT and I_DELETE. RDB_ma_insert and RDB_ma_vdelete
  now contain a flags field which must be initialized when a pointer
  to the respective structure is passed to RDB_multi_assign().

- Duro D/T: Tuple attributes are now allowed as a target in INSERT, D_INSERT,
  DELETE, I_DELETE, and LOAD.

- form_to_tuple() is now in package net.

- If the evaluation of an expression fails Duro D/T no longer retries with
  a transaction to read operators from the catalog.
  Replaced Duro_evaluate_retry() and  Duro_expr_type_retry() by Duro_evaluate()
  and Duro_expr_type().

- Added function Duro_evaluate() which does not start a transaction.

- Changed RDB_add_table() which now takes an optional RDB_database argument.
  Added a db argument to duro::table add.

- Database environments are by default opened with the DB_CREATE flag.

- Dropped RDB_get_update_op_e(). RDB_get_update_op() now has the same signature
  as RDB_get_update_op_e() previously had.

- RDB_rollback_all() is available in rdb.h.

- Added arguments getfnp and getarg to RDB_extend_tuple() for retrieving
  variables.

- Added type datetime.

- Creation time of user-defined operators is stored in the catalog.

- Renamed catalog attributes: name in sys_upd_ops and sys_ro_ops is now opname,
  name in sys_indexes is now idxname.

- Fixed a bug in the handling of string literals in user-defined operators.

- Generic tuple types are now allowed in operator parameters.

- Replaced fatal_error by data_corruption_error and run_recovery_error.

- Java interface: DException now extends RuntimeException.

- Added built-in read-only operators strfind_b(), substr_b(), and strlen_b().

DuroDBMS 0.25

- Added support for modules.

- I/O, system, and www operators are now in system-provided modules io, sys,
  and www, respectively. 

- Fixed bug in opening secondary indexes that could cause index corruption.

- Assignment of virtual and public tables using := is now supported.

- Added RDB_drop_table_by_name(), solving the problem of dropping unmapped
  public tables.

- DROP VAR and RENAME VAR are now generally prohibited in FOR .. IN loops.

- Improved error handling in Duro D/T. If an error occurs while executing
  a user-defined operator, the operator name is shown. The line where
  the error occured is identified with greater accuracy.

- Added type check to RDB_obj_set_property().

DuroDBMS 0.24

- Added error type type_not_found_error.

- Type definition now supports ORDERED.
  Added flags argument to RDB_define_type() and -ordered option
  to Duro::type define.

- Types in ORDER clause must be ordered.

- Queries of the form T1 JOIN T2 RENAME { ... } can now be optimized.

- Added RDB_expr_kind(), RDB_expr_op_args(), and RDB_expr_list_get().

- DSession is now a class. Renamed DuroPossrepObject as DefaultPossrepObject
  and VarDef as NameTypePair.
  Added missing methods and javadoc comments to UpdatableXXX classes. 

DuroDBMS 0.23

- Added connect() with recover parameter.

- Added RDB_create_env(), dropped RDB_CREATE flag of RDB_open_env()
   in favour of RDB_RECOVER. The Durotcl command duro::env was
   changed accordingly. 

- EXPLAIN now supported for local tables

- Fixed bug that caused secondary index corruption.

- Upgrade to BerkeleyDB 6.1.

DuroDBMS 0.22

- Added support for user-defined operators implemented in Java.

- Argument of RDB_base_type() is now const.

- Added function RDB_operator_param_count().

- Fixed bug in processing of OPERATOR statement with more than 2 parameters.

DuroDBMS 0.21

- Added DELETE with relation or tuple as 2nd argument to RDB_multi_assign.
  Added DELETE <table exp> <tuple or table exp> to Duro D/T.

- Added Java support.

- Allowing for more than one interpreter per process.

- Moved dbenv argument from Duro_dt_execute() to Duro_init_interp().

- Renamed RDB_obj_comp() as RDB_obj_property() and RDB_obj_set_comp()
  as RDB_obj_set_property().

- Renamed RDB_ec_get_property as RDB_ec_property().

- Added RDB_type_possreps().

DuroDBMS 0.20

- Implemented transition constraints.

- Implemented system keys using serial().

- Fixed bugs in the handling of default values and array-valued attributes.

- Refactored the code, moving functions which do not depend on persistence to
  directory obj.

- Durotcl: Default values must be passed to duro::table create as expressions
  (e.g. strings must be quoted)

DuroDBMS 0.19

- Renamed Duro_exit_interp() to Duro_destroy_interp(). 

- Added system constraint sys_indexes { tablename } subset_of sys_rtables { tablename }.  

- Added D_UNION.

- A rollback now sets all user tables to a special state so that when they
  are accessed it is checked if they still exist in the catalog.

- Replaced FOREACH by FOR.

- Added type 'identifier' which is used in the catalog.

- Added support for public tables.

- Fixed possible double free in the parser when invalid
  characters are read.

DuroDBMS 0.18

- UPDATE expression now allows empty attribute assign list.

- Syntax of RENAME and SUMMARIZE are now close to Tutorial version from Oct 30, 2011. 

- Duro D/T: Added implicit transaction support. 

- Fixed issue with updating key attributes.

- Added initexp argument to RDB_define_type() and INIT specification
  to type definition statement. Added initexp argument to duro::type define.

DuroDBMS 0.17

- Improved query optimization, escpecially MINUS, INTERSECT, SEMIMINUS, and SEMIJOIN.

- Added RDB_table_matching_tuple() to the public interface.

- Added FastCGI support.

- Renamed length(string) to strlen().

- Operator www_form_to_tuple converts urlencoded form data to a tuple value.

- Changed operator precedence to allow for expressions like
  T1 { A } SUBSET_OF T2 { A }

- getenv() returns an empty string if the environment variable does not exist.

- Improved support for type binary, including read() operators for reading
  binary data.

- Assigning components in a multiple assignment now supported.

- Added LIKE operator.

- Renamed MATCHES to REGEX_LIKE.

- index_of() operator supports searching in arrays.

- KEY no longer mandatory when creating real or private tables
  even when there is no INIT value.

- IMPLEMENT TYPE now supports multiple possible representations.

DuroDBMS 0.16

- Components are now accessed directly by their names in type constraints.

- durodump.tcl exports only real tables.

- IMPLEMENT TYPE now requires END IMPLEMENT.

- Duro D/T: Added DEFAULT, FOREACH loop, INDEX, DROP INDEX, EXPLAIN

- Duro D/T now uses GNU readline, providing keyword completion.
  (Not under MS Windows)

- Added TCLOSE, MATCHING, NOT MATCHING

- Renamed RDB_drop_expr() to RDB_del_expr() for consistency.

- RDB_get_table() now raises a name_error if the table is not found.

- Dropped database SYS_DB.

Duro 0.15

- Replaced PRINT/PRINTLN/READLN by put/put_line/get_line.

- Changed WITH and EXTEND syntax according to Database Explorations.

- Duro D/T now supports headings in relation selectors.

- Duro D/T sets LC_CTYPE and LC_COLLATE locales according to the environment.

- Explicit BEGIN TRANSACTION no longer required in Duro D/T for invoking
  user-defined operators and using user-defined types.

- Built-in types and operators are now lowercase, Duro D/T converts identifiers to lowercase.

- Renamed RDB_create_XXX functions for non-scalar types to RDB_new_XXX.

- Added RDB_del_nonscalar_type(). Changed RDB_drop_type to support only user-defined types.

- Replaced iargp and iarglen parameters of RDB_create_ro_op() and RDB_create_update_op()
  by explicit source code parameter.

- Trace output can be enabled using RDB_env_trace() and trace().

- Tuple JOIN is now tuple UNION.

- Added RDB_is_selector().

- Removed RDB_tx_env().

- Added aggregate operators AND and OR as synonyms for ALL and ANY.

- Added XOR.

- Changed interface and calling conventions for user-defined operators.

- Added RDB_get_update_op to the public interface. Renamed RDB_call_ro_op
  and RDB_call_update_op as RDB_call_ro_op_by_name and RDB_call_update_op_by_name.
  Added RDB_call_update_op with new semantics.

- Conversion of expressions etc. to string is now part of the core.

- File I/O

- Upgrade to Berkeley DB 5.3. (But older versions should work too)

- Storing user-defined operators as source code

- RDB_expr_type now always raises an error if the type could not be determined.

- Change in catalog table SYS_POSSREPCOMPS

- Changed type handling in RDB_evaluate(), RDB_call_ro_op(), and
  RDB_call_update_op(),

Duro D/T:

- Added TUP, REL, DEE, and DUM as synonyms for TUPLE, RELATION, TABLE_DEE
  and TABLE_DUM.

- LEAVE is now supported

- Improved array support

- Non-scalar types allowed as possrep components

- Changed FOR/DO to allow for zero iterations

Duro 0.14

- Upgraded to Berkeley DB 4.7.

- Duro D/T now supports CASE and constraints.

- Added exception handling to Duro D/T.

- Dropped first argument of CONNECT.

- The return type is now explicitly passed to functions which implement
  read-only operators.

- Single quotes are now used in data output in Tutorial D form.

- If a type is not found, NAME_ERROR is raised instead of NOT_FOUND_ERROR.

- Added limited type implementation functionality to Duro D/T.

- Added operator GETENV.

Duro 0.13

- Renamed build target "check" to "test".

- Upgraded to Berkeley DB 4.6.

- Removed arguments ltfnp, arg, and txp from parsing functions.

- Added RDB_type_is_relation().

- Added built-in operators TUPLE and RELATION.

- Dropped argc argument of RDB_ro_op().

- RDB_insert() and RDB_multi_assign() now support inserting tables.

- RDB_table_to_array() now supports two modes (buffered and unbuffered).

- Implemented interpreter Duro D/T.

- Fixed bug in Duroadmin - now uses correct floating-point type.

- Replaced ATTRIBUTE_NOT_FOUND_ERROR by NAME_ERROR.

- Renamed INVALID_TRANSACTION_ERROR to NO_RUNNING_TX_ERROR
  and RDB_raise_invalid_tx() to RDB_raise_no_running_tx().

- Dropped type DOUBLE. FLOAT is now double precision.

- Lexer: removed leading "-" from number literals.

- Using doxygen for the documentation.

Duro 0.12

- Replaced GNU Autotools by SCons.

- Using tcltest for testing.

- Changed interface for creating read-only operator expressions.

- Replaced RDB_table by RDB_object.

- Replaced RDB_project(), RDB_union() etc. by RDB_expr_to_vtable()

- Removed RDB_expr_any(), RDB_expr_all(), etc.

- Added RDB_init_table() and RDB_init_table_from_type() for creating
  local tables; removed argument 'global' from RDB_create_table()
  and RDB_create_table_from_type().

- Added RDB_table_is_persistent() and RDB_table_is_real().

- Added RDB_dup_nonscalar_type().

- Renamed RDB_expr_var() to RDB_var_ref().

- Removed RDB_parse_table().

- Changes to expression syntax for better conformance with TTM, third
  edition.

Duro 0.11

- Added RDB_type_attrs().

- Removed RDB_set_errfile(), RDB_get_errfile(), RDB_set_errfn(),
  and RDB_get_errfn().

- Durotcl: Added duro::env seterrfile. dberror is no longer called.

- Bugfixes.

Duro 0.10

- Replaced RDB_RATIONAL by RDB_FLOAT and RDB_DOUBLE.

- RDB_update() and RDB_delete return the number of tuples updated or
  deleted, respectively.

- Added option --without-tcl to configure.

- RDB_cardinality() returns an RDB_int.

- Added SEMIMINUS and SEMIJOIN.

- Redesigned the API, using scalar types for returning error information
  instead of a numerical error code.

- Added IF operator.

- Dropped catalog table SYS_POSSREPS.

- Implemented RDB_multi_assign().

- Durotcl uses Tutorial D syntax to represent values of user-defined
  types. The comparison operator is passed the actual representation.

- Read-only operators can access the current transaction if called from Tcl.

- Changed expression grammar to allow empty attribute name lists and empty
  expression lists.

- Now supporting general relation-valued expressions.

- Now supporting a user-defined comparison operator for user-defined types.

- Type constraints are now specified outside of possible representations.

- Fixed problem with error dialogs in Durotcl.

- Implemented RDB_create_constraint() and RDB_drop_constraint().

- Replaced RDB_expr_attr() by RDB_exp_var().

- A call failing for a system error no longer always results in
  an implicit rollback.

- Bugfixes.

- Single quotes are now supported in addition to double quotes
  as delimiters in string literals.

Duro 0.9

- Documented utilities in utils.html.

- Upgraded to Berkeley DB 4.3.

- Added dump utility Durodump.

- Added help menu and version information to Duroadmin.

- Added B-tree indexes.

- RDB_set_table_name() now works for global tables.

- Replaced RDB_user_op() by RDB_ro_op() and RDB_ro_op_va().

- Dropped RDB_neq() etc., replaced by RDB_ro_op() and RDB_ro_op_va().

- Added transaction argument to RDB_select(), RDB_extend(), and
  RDB_summarize().

- Added built-in operators LENGTH, SUBSTRING, IS_EMPTY, COUNT, and SUBSET_OF.

- Added conversion operators, arithmetical operators, etc., as built-in
  operators.

- Durotcl now supports creating tables with user-defined types.

- Implemented duro::table rename and duro::table def.

- Changed duro::table attrs.

- Changed argument order of duro::db to conform with duro::begin.

- Expressions now support backslash escaping in strings.

- Changed expression grammar so that expressions like A UNION B UNION C
  are now possible.

- Minor change to RDB_expression struct.

- Removed RDB_begin_uoi() and RDB_end_uoi() from the API specification.

- Fixed bugs in the library and Duroadmin.

- The obsolete program lstables is no longer installed.

Duro 0.8

- Introduced error code RDB_ATTRIBUTE_NOT_FOUND.

- Implemented RDB_insert() for RENAME, WRAP, UNWRAP tables.

- Implemented RDB_project_tuple() and RDB_join_tuples().

- Implemented RDB_update() for selection tables.

- Implemented RDB_delete() for EXTEND tables.

- Implemented RDB_create_table_index() and RDB_drop_table_index().

- Implemented RDB_table_equals().

- Implemented RDB_expr_contains().

- RDB_create_table() does now more complete argument checking.

- Added query optimizer.

- RDB_binary_get() now returns a pointer to the data instead of copying it.

- Now allowing nonscalar types as operator argument and return types.

- Now allowing nonscalar types as actual representations.

- Added SUBSET operator.

- Implemented GROUP and UNGROUP.

- Implemented support for system-implemented user-defined types with
  more than one possrep component.

- Changed RDB_create_tuple_type() and RDB_create_relation_type(), which now
  return an error code.

- Changed argument order of RDB_extract_tuple() and RDB_call_ro_op().

- Implemented relation-valued table attributes.

- Implemented array-valued attributes and RDB_create_array_type().

- Removed the libname argument from RDB_implement_type(). Selectors,
  getters, and setters are now created using RDB_create_ro_op() and
  RDB_create_update_op().

- Removed RDB_select_obj() and RDB_selector(). Use RDB_call_ro_op() and
  RDB_user_op() instead.

- Removed RDB_create_env().

- Implemented duro::table attrs.

- Implemented RDB_get_dbs() and duro::env dbs.

- Changed semantics of duro::operator create.

- Implemented GUI admin tool.

- duro::insert now raises an error if the tuple is already an element of the
  table.

- duro::array index and duro:array foreach now take a
  transaction argument.

- Durotcl functions now set errorCode.

- Added support for user-defined types in Durotcl through duro::type.

- Added tuple operations and relation literals to the expression parser.

- Fixed WRAP syntax.

- Fixed charset handling of Durotcl expressions.

- Fixed several other bugs.

Duro 0.7

- Tcl interface, including evaluation of relational expressions in
  Tutorial D syntax. A C interface for expression parsing is provided.

- Implemented RDB_sdivide().

- Implemented tuple-valued table attributes, RDB_wrap(), and RDB_unwrap().

- Implemented RDB_remove().

- Implemented insert into projections.

- Added support for multiplication, division, unary minus, and string
  concatenation in expressions.

- Added RDB_table_to_obj() and RDB_obj_table().

- Renamed RDB_obj_set_XXX() to RDB_XXX_to_obj() and RDB_expr_table() to
  RDB_table_to_expr().

- Dropped RDB_tuple and RDB_array, using RDB_object instead. Renamed
  RDB_array_get_tuple() as RDB_array_get().

- Replaced RDB_make_persistent() by RDB_add_table().

- Fixed bug in RDB_extract_tuple().

- Fixed bug with updating key attributes of tables with more than one
  candidate key.

- Fixed problem with commit/rollback after dropping tables.

- Now using to BerkeleyDB 4.2 (no modifications were required)

Duro 0.6

- For the sake of uniformity, changed argument order of RDB_table_to_array()

- RDB_array_get_tuple() now obtains a pointer to a RDB_tuple.

- Added sorting (through the seqitc/seqitv arguments of
  RDB_table_to_array())

- Renamed RDB_value as RDB_object. Renamed RDB_init_value() as
  RDB_init_obj(), etc.

- RDB_drop_type now takes a RDB_transaction * argument

- More API changes. A draft API spec is now available.

- Replaced structure RDB_key_attrs by the more general RDB_string_vec.

- Implemented user-defined operators.

- Added support for default table attributes.

- Fixed issue with RDB_update().

- Added error logging.

- RDB_get_table now takes a RDB_transaction * argument.

- Implemented user-defined types.

- Renamed field "type" in RDB_attr as "typ", for the sake of uniformity.

Duro 0.5

- Added RDB_extract_tuple() to extract a single tuple from a table.

- Bugfixes

- Added regular expression matching (requires POSIX.2 regular expressions)

- Added argument 'options' to RDB_create_env().

- Added support for RENAME and SUMMARIZE PER (except COUNTD, SUMD, and AVGD).

- Changed error handling: Implicit rollback also by other system errors
  than deadlock; added function RDB_is_syserr() for checking for system
  errors.

- Renamed RDB_deinit_XXX functions as RDB_destroy_XXX.

- Now checking table and attribute names: nonprintable characters, whitespace,
  and '$' are not permitted.

- Renamed field 'value' in RDB_virtual_attr as 'exp'.

- Made RDB_rel_table() the only way to create a relational expression.

Duro 0.4

- Persistent virtual tables now supported through RDB_set_table_name()
  and RDB_make_persistent()

- Releasing databases no longer required before closing the environment

- Added operators < > <= >=

- RDB_init_value(), RDB_init_array(), and RDB_init_tuple() do no longer
  return an error code (the error checking, if necessary, is delayed
  to first use of the variable). This makes initialization/deinitialization
  code much simpler.

- Fixed alignment bug

- Added data type BINARY
